import random

from coincollector_mazes.get_maze import get_maze, print_maze_info
from coincollector_mazes.refine_maze import add_new_edges


def generate_maze_data_with_seed(seed: int, number_of_mazes: int, difficulty_level=250, circles=0) -> list:
    '''
    Generates a list of Coin-Collector mazes.

    Args:
        seed: seed used to generate seeds for map generation.
        number_of_mazes: number of mazes generated.
        difficulty_level: 10 for short line graphs; 250 for long levels which are not line graphs.
        circles: number of circles to be added to the tree generated by standard Textworld method.

    Returns:
        A list of network-x graphs encoding Coin-Collector mazes.
    '''
    random.seed(seed)
    maze_list = []
    for k in range(number_of_mazes):
        print('Generating maze %s of %s...' % (k, number_of_mazes))
        this_seed = random.randint(1,100000)
        maze = get_maze(difficulty_level, this_seed)
        if circles>0:
            print('Adding circles to maze...')
            maze = add_new_edges(maze, circles, this_seed)
        maze_list += [maze]
    return maze_list

def generate_trivial_mazes(how_many: int, seed=100):
    return generate_maze_data_with_seed(seed, how_many, difficulty_level=5, circles=0)

def generate_normal_mazes(how_many: int, seed=100):
    return generate_maze_data_with_seed(seed, how_many, difficulty_level=250, circles=0)

def generate_hard_mazes_with_one_circle(how_many: int, seed=100):
    return generate_maze_data_with_seed(seed, how_many, difficulty_level=250, circles=1)

def generate_hard_mazes_with_many_circles(how_many: int, seed=100):
    return generate_maze_data_with_seed(seed, how_many, difficulty_level=250, circles=150)


if __name__ == '__main__':
    number_of_mazes = 10
    # maze_list = generate_trivial_mazes(10)
    # maze_list = generate_normal_mazes(10)
    # maze_list = generate_hard_mazes_with_one_circle(10)
    maze_list = generate_hard_mazes_with_many_circles(10)
